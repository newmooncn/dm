# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>). All Rights Reserved
#    $Id$
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
from osv import fields,osv,orm

class sale_order(osv.osv):
    _inherit="sale.order"    
    _columns={
        #links to account_move        
        'payment_moves': fields.many2many('account.move', string='Payment Moves', readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)], 'agreed': [('readonly', False)]})
    }

    #from the sale_payment_method.sale.py, add the sale_id
    def _prepare_payment_move(self, cr, uid, move_name, sale, journal,
                              period, date, description, context=None):
        resu = super(sale_order,self)._prepare_payment_move(cr,uid,move_name,sale,journal,period,date,description,context)
        resu.update({'sale_ids':[(4, sale.id)]})
        return resu
    
    def copy(self, cr, uid, id, default=None, context=None):
        if default is None:
            default = {}
        default['payment_moves'] = False
        return super(sale_order, self).copy(cr, uid, id, default, context=context)
    
class account_move(osv.osv):
    _inherit="account.move"
    _columns = {
        'sale_ids': fields.many2many('sale.order', string='Sales Orders'),
    }       
    def unlink(self, cr, uid, ids, context=None, check=True):
        #if the move's line generated by the sales payment, then cancel this entry firstly
        moves = self.browse(cr,uid,ids,context)
        for move in moves:
            if move.state == 'posted' and move.sale_ids:
                self.button_cancel(cr,uid,[move.id],context=context)
        #execute the delete action
        result = super(account_move, self).unlink(cr, uid, ids, context=context)
        return result
    
class pay_sale_order(orm.TransientModel):
    _inherit = 'pay.sale.order'       
    _columns = {
        'amount_max': fields.float('Max Amount'),
    }
    def _get_amount(self, cr, uid, context=None):
        if context is None:
            context = {}
        if context.get('active_id'):
            sale_obj = self.pool.get('sale.order')
            order = sale_obj.browse(cr, uid, context['active_id'],
                                    context=context)
            return order.residual
        return False    
    _defaults = {
        'amount': 0,
        'amount_max':_get_amount,
    }    
    def _check_amount(self, cr, uid, ids, context=None):
        for pay in self.browse(cr, uid, ids, context=context):
            if pay.amount <= 0 or pay.amount > pay.amount_max:
                return False
        return True
    _constraints = [(_check_amount, 'Pay amount only can be between zero and the balance.', ['amount'])]
        